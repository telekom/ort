/*
 * Copyright (C) 2020-2021 Bosch.IO GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package org.ossreviewtoolkit.model

import com.fasterxml.jackson.core.JsonParser
import com.fasterxml.jackson.databind.DeserializationContext
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.deser.std.StdDeserializer
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef

import java.net.URI

/**
 * Base model for all vulnerability providers supported by the advisor.
 *
 * This class stores the information about a single vulnerability, which may have been retrieved from multiple
 * vulnerability providers. For each source of information a [VulnerabilityReference] is contained.
 */
@JsonDeserialize(using = VulnerabilityDeserializer::class)
data class Vulnerability(
    /**
     * The ID of a vulnerability. Most likely a CVE identifier.
     */
    val id: String,

    /**
     * A list with detailed information for this vulnerability obtained from different sources.
     */
    val references: List<VulnerabilityReference>
) {
    init {
        require(references.isNotEmpty()) {
            "A Vulnerability must have at least one reference."
        }
    }

    /**
     * The rating attaches human-readable semantics to the score number according to CVSS version 2, see
     * https://www.balbix.com/insights/cvss-v2-vs-cvss-v3/#CVSSv3-Scoring-Scale-vs-CVSSv2-6.
     */
    enum class Cvss2Rating(private val upperBound: Float) {
        LOW(4.0f),
        MEDIUM(7.0f),
        HIGH(10.0f);

        companion object {
            /**
             * Get the [Cvss2Rating] from a [score], or null if the [score] does not map to any [Cvss2Rating].
             */
            fun fromScore(score: Float): Cvss2Rating? =
                when {
                    score < 0.0f || score > HIGH.upperBound -> null
                    score < LOW.upperBound -> LOW
                    score < MEDIUM.upperBound -> MEDIUM
                    score <= HIGH.upperBound -> HIGH
                    else -> null
                }
        }
    }

    /**
     * The rating attaches human-readable semantics to the score number according to CVSS version 3, see
     * https://www.first.org/cvss/v3.0/specification-document#Qualitative-Severity-Rating-Scale.
     */
    enum class Cvss3Rating(private val upperBound: Float) {
        NONE(0.0f),
        LOW(4.0f),
        MEDIUM(7.0f),
        HIGH(9.0f),
        CRITICAL(10.0f);

        companion object {
            /**
             * Get the [Cvss3Rating] from a [score], or null if the [score] does not map to any [Cvss3Rating].
             */
            fun fromScore(score: Float): Cvss3Rating? =
                when {
                    score < 0.0f || score > CRITICAL.upperBound -> null
                    score == NONE.upperBound -> NONE
                    score < LOW.upperBound -> LOW
                    score < MEDIUM.upperBound -> MEDIUM
                    score < HIGH.upperBound -> HIGH
                    score <= CRITICAL.upperBound -> CRITICAL
                    else -> null
                }
        }
    }
}

/**
 * A custom deserializer to support the deserialization of [Vulnerability] instances using an older format, in which
 * detailed information was embedded into the class rather than externalized in [VulnerabilityReference] objects.
 */
private class VulnerabilityDeserializer : StdDeserializer<Vulnerability>(Vulnerability::class.java) {
    override fun deserialize(p: JsonParser, ctx: DeserializationContext): Vulnerability {
        val vulnerabilityNode = p.codec.readTree<JsonNode>(p)
        val id = vulnerabilityNode["id"].textValue()

        return if (vulnerabilityNode["references"] != null) {
            val references = jsonMapper.convertValue(
                vulnerabilityNode["references"], jacksonTypeRef<List<VulnerabilityReference>>()
            )
            Vulnerability(id, references)
        } else {
            val severity = vulnerabilityNode["severity"].floatValue()
            val uri = vulnerabilityNode["url"].textValue()
            val reference = VulnerabilityReference(URI(uri), null, severity.toString())
            Vulnerability(id, listOf(reference))
        }
    }
}
